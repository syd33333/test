    public Mono<Message<?>> processAndDecide(Mono<String> payload) {
        return payload.flatMap(this::saveEntity)
                .hasElement()
                .defaultIfEmpty(false) // Ensure we have a value
                .map(isSaved -> {
                    String routeTo = isSaved ? "outputChannel1" : "nullChannel";
                    return MessageBuilder.withPayload("Save " + (isSaved ? "successful" : "failed") + ": " + payload.block()) // Block here if needed, but avoid in production
                            .setHeader("routeToOutput", routeTo)
                            .build();
                })
                .onErrorResume(e -> Mono.just(MessageBuilder.withPayload("Save failed: " + e.getMessage())
                        .setHeader("routeToOutput", "nullChannel")
                        .build())); // Handle errors by routing to nullChannel
    }
