 @Bean
    public JmsTemplate jmsTemplate() {
        return new JmsTemplate(cachingConnectionFactory());
    }

    @Bean
    public IntegrationFlow inboundFlow() {
        String inQueueName = "IN.QUEUE"; // Incoming queue name

        return IntegrationFlows
            .from(Jms.messageDrivenChannelAdapter(cachingConnectionFactory())
                .destination(inQueueName))
            .log(message -> "Incoming payload: " + message.getPayload().getClass() + " - " + message.getPayload())
            .channel("splitChannel") // Route to a common channel for splitting
            .get();
    }

    @Bean
    public IntegrationFlow outboundFlow1(JmsTemplate jmsTemplate) {
        String outQueue1 = "OUT.QUEUE1"; // First destination queue

        return IntegrationFlows
            .from("splitChannel")
            .transform(messageTransformer::transformForQueue1) // Transform for Queue1
            .log(message -> "Payload after transform for Queue1: " + message.getPayload().getClass() + " - " + message.getPayload())
            .handle((payload, headers) -> {
                jmsTemplate.convertAndSend(outQueue1, payload); // Explicitly send as TextMessage
                return null;
            })
            .get();
    }
